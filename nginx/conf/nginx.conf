user  nginx;
# 可打开进程数，建议与CPU核数相同
worker_processes  2;
# 每个进程分配的CPU，二进制位对应 worker_processes
worker_cpu_affinity 00000001 00000010;
# 每个进程最大能打开的文件描述符
worker_rlimit_nofile 65535;

error_log  /var/log/nginx/error.log warn;
# non-root用户权限
pid        /tmp/nginx.pid;


events {
    # 每个进程的连接数
    worker_connections  10240;
    # epoll: Linux2.6+
    # kqueue: FreeBSD4.1+、OpenBSD2.9+、NetBSD2.0、 MacOSX(非多CPU)
    # /dev/poll: Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+
    # eventport: Solaris 10
    use epoll;
}

http {
    # 关闭显示版本号
    server_tokens off;
    # 请求的保活秒数
    keepalive_timeout  60;
    # 客户端请求头部的缓冲区大小，根据系统分页大小来设置(执行命令: getconf PAGESIZE)
    client_header_buffer_size 4k;

    #
    # 将为打开文件指定缓存，inactive为文件无访问多久删除缓存
    open_file_cache max=65535 inactive=60s;
    # 每隔多久检查一次缓存有效信息
    open_file_cache_valid 80s;
    # 缓存文件在一次检查中被访问多少次认为有效
    open_file_cache_min_uses 1;

    # 开启高效文件传输模式
    sendfile        on;
    # sendfile开启才有效，积极的减少网络报文段的数量，将响应头和正文的开始部分一起发送，而不一个接一个的发送
    tcp_nopush     on;

    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=1d max_size=30g ;

    tcp_nodelay on;
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;




    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # non-root权限
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path       /tmp/proxy_temp_path;
    fastcgi_temp_path     /tmp/fastcgi_temp;
    uwsgi_temp_path       /tmp/uwsgi_temp;
    scgi_temp_path        /tmp/scgi_temp;


    include /etc/nginx/conf.d/*.conf;
}



